---
title: "Data coverage descriptives"
format:
  html:
    toc: true
---


```{r Options, include = F}

knitr::opts_chunk$set(echo = TRUE)

```

```{r Setup, include = F, message = F}

library(tidyverse)
library(arrow)
library(leaflet)
library(tigris)
library(sf)
library(DT)
library(janitor)
library(this.path)
library(snakecase)

options(scipen = 999)
options(tigris_use_cache = TRUE)

# Path to data directory
data_path <- str_c(this.dir(), "data", sep = "/")

```

```{r Read data, include = F}

# Aggregated data 

county_month_aggregated <- read_csv(
  str_c(
    data_path,
    "aggregated_data",
    "county_month_aggregated_2025-04-02.csv",
    sep = "/"
  )
)

county_total_aggregated <- read_csv(
  str_c(
    data_path,
    "aggregated_data",
    "county_total_aggregated_2025-04-02.csv",
    sep = "/"
  )
)

# Thresholding data

county_month_thresholds <- read_csv(
  str_c(data_path,
        "coverage_data",
        "county_month_selected_grantees_2025-03-21.csv",
        sep = "/"
  )
)

county_total_thresholds <- read_csv(
  str_c(data_path,
        "coverage_data",
        "county_total_selected_grantees_2025-03-21.csv",
        sep = "/"
  )
)

# Missing address data

county_month_missing_address <- read_csv(
  str_c(data_path,
        "coverage_data",
        "county_month_missing_address_summary_2025-04-02.csv",
        sep = "/"
  )
)

county_total_missing_address <- read_csv(
  str_c(data_path,
        "coverage_data",
        "county_total_missing_address_summary_2025-04-02.csv",
        sep = "/"
  )
)

```

```{r Counties list, include =F}

# Get counties for whole country with states

states <- states(year = 2020, , cb = TRUE) %>% 
  st_drop_geometry()

counties_raw <- counties(year = 2020, cb = TRUE) 

counties <- counties_raw %>%
  left_join(states %>% 
              select(STATEFP, state = NAME), 
            by = "STATEFP") %>% 
  # Exclude territories
  filter(!state %in% c("Puerto Rico", 
                       "United States Virgin Islands", 
                       "Guam", 
                       "Commonwealth of the Northern Mariana Islands", 
                       "American Samoa"))

```

## Geographic county level

### Map of counties included in final outputs

The map below shows which counties are a part of the county-total aggregation, the county-month aggregation, or both.

```{r, include = F, message = F}

# Combine data and prep
counties_included_total <- county_total_aggregated %>% 
  distinct(county_geoid_coalesced) %>% 
  mutate(source = "Included only in County-Total Dataset")

counties_included_monthly <- county_month_aggregated %>% 
  distinct(county_geoid_coalesced) %>% 
  mutate(source = "Included in County-Month and County-Total Datasets")

counties_included_combined <- 
  full_join(counties_included_total, counties_included_monthly, by = "county_geoid_coalesced") %>% 
  mutate(source = coalesce(source.y, source.x))

```

```{r, include = F, message = F}

map_data <- counties %>% 
  left_join(counties_included_combined, 
            by = join_by("GEOID" == "county_geoid_coalesced")) %>%
  mutate(source = replace_na(source, "No data")) %>% 
  st_transform(map_data, crs = 4326)

pal <- colorFactor(palette = c("#b69ee2", "#7ebcef", "lightgray"), domain = map_data$source)

labels <- 
  sprintf(
    "<strong>%s</strong><br/> GEOID %s<br/>%s",
    map_data$NAMELSAD,
    map_data$GEOID,
    map_data$source
  ) %>%
  map(htmltools::HTML)


map <- leaflet() %>%
  addProviderTiles("CartoDB.Positron") %>%
  addPolygons(
    data = map_data,
    fillColor = ~ pal(source),
    color = "black",
    fillOpacity = 0.7,
    weight = 0.2,
    smoothFactor = 0.2,
    label = labels
  ) %>%
  addLegend(
    pal = pal,
    values = map_data$source,
    position = "bottomleft",
    title = paste0("Counties included in aggregate data"),
    labFormat = labelFormat(suffix = "")
  ) %>%
  leaflet::setView(lng = -100, lat = 54.5, zoom = 3)

map

```

### Number and % of counties included in the final output, by state

The table below presents county coverage by state. The tabs above the table can be toggled to view data for each dataset.

::: panel-tabset

## County-Month Dataset

```{r, echo = FALSE, message = FALSE, warning = FALSE}

counties %>% 
  st_drop_geometry() %>% 
  mutate(in_dataset = GEOID %in% county_month_aggregated$county_geoid_coalesced) %>% 
  group_by(state, in_dataset) %>% 
  summarize(counties_included = n()) %>% 
  mutate(percent_included = counties_included / sum(counties_included)) %>% 
  ungroup() %>% 
  filter(in_dataset) %>% 
  select(-in_dataset) %>% 
  arrange(state) %>% 
  rename_with(~to_sentence_case(.)) %>% 
  datatable() %>% 
  formatPercentage("Percent included", digits = 1)
  
```

## County-Total Dataset

```{r, echo = FALSE, message = FALSE, warning = FALSE}

counties %>% 
  st_drop_geometry() %>% 
  mutate(in_dataset = GEOID %in% county_total_aggregated$county_geoid_coalesced) %>% 
  group_by(state, in_dataset) %>% 
  summarize(counties_included = n()) %>% 
  mutate(percent_included = counties_included / sum(counties_included)) %>% 
  ungroup() %>% 
  filter(in_dataset) %>% 
  select(-in_dataset) %>% 
  arrange(state) %>% 
  rename_with(~to_sentence_case(.)) %>% 
  datatable() %>% 
  formatPercentage("Percent included", digits = 1)

```

:::

### Counties with high share of missing addresses

Payment records may be locatable to a county even if its street address is missing (for example, if an ERA grantee's jurisdiction is entirely within a single county). 

In deriving the number of unique assisted addresses for the aggregation, we treat records with missing addresses as unique from every other address. However, this assumption is liberal because multiple payments to a single address cannot be distinguished from single payments to multiple addresses if the address is missing.

Therefore, if a county includes a large proportion of records with missing addresses, the number of unique assisted addresses may be inflated. The table below presents these data. For example, nearly 100% of records located to Washington, D.C. are missing street address.

::: panel-tabset

## County-Month Dataset

```{r, echo = FALSE, message = FALSE, warning = FALSE}

county_month_missing_address %>% 
  select(-missing_address) %>% 
  rename(n_missing_addresses = n) %>% 
  arrange(desc(percent)) %>% 
  left_join(counties %>% 
              st_drop_geometry() %>% 
              select(GEOID, NAMELSAD, STUSPS), 
            by = join_by("county_geoid_coalesced" == "GEOID")) %>% 
  select(county_GEOID = county_geoid_coalesced,
         county_name = NAMELSAD, 
         state = STUSPS,
         n_missing_addresses,
         percent_missing_addresses = percent) %>%
  rename_with(~to_any_case(., case = "title", abbreviations = "GEOID")) %>% 
  datatable() %>% 
  formatRound(c("N Missing Addresses"), digits = 0) %>% 
  formatPercentage("Percent Missing Addresses", digits = 1)

```

## County-Total Dataset

```{r, echo = FALSE, message = FALSE, warning = FALSE}

county_total_missing_address %>% 
  select(-missing_address) %>% 
  rename(n_missing_addresses = n) %>% 
  arrange(desc(percent)) %>% 
  left_join(counties %>% 
              st_drop_geometry() %>% 
              select(GEOID, NAMELSAD, STUSPS), 
            by = join_by("county_geoid_coalesced" == "GEOID")) %>% 
  select(county_GEOID = county_geoid_coalesced,
         county_name = NAMELSAD, 
         state = STUSPS,
         n_missing_addresses,
         percent_missing_addresses = percent) %>%
  rename_with(~to_any_case(., case = "title", abbreviations = "GEOID")) %>% 
  datatable() %>% 
  formatRound(c("N Missing Addresses"), digits = 0) %>% 
  formatPercentage("Percent Missing Addresses", digits = 1)

```

:::

## Grantee level

The tables below present information relating to data coverage and quality. These data are presented at the *grantee* level, rather than at the geographic county level, because data thresholding decisions were made at the grantee level.

### Number of grantees included, by type

::: panel-tabset

## County-Month Dataset

```{r, echo = FALSE, message = FALSE, warning = FALSE}

county_month_thresholds %>% 
  group_by(geographic_level, threshold_passing_with_complete_geography) %>%
  summarize(number_of_grantees_included = n ()) %>% 
  mutate(percent_included = number_of_grantees_included / sum(number_of_grantees_included)) %>% 
  ungroup() %>% 
  filter(threshold_passing_with_complete_geography) %>% 
  select(-threshold_passing_with_complete_geography) %>% 
  mutate(geographic_level = fct_relevel(geographic_level, "State", "County", "City")) %>% 
  rename(grantee_type = geographic_level) %>% 
  rename_with(~to_sentence_case(.)) %>% 
  datatable(options = list(paging = FALSE, searching = FALSE)) %>%  
  formatPercentage("Percent included", digits = 1)

```

## County-Total Dataset

```{r, echo = FALSE, message = FALSE, warning = FALSE}

county_total_thresholds %>% 
  group_by(geographic_level, threshold_passing_with_complete_geography) %>%
  summarize(number_of_grantees_included = n ()) %>% 
  mutate(percent_included = number_of_grantees_included / sum(number_of_grantees_included)) %>% 
  ungroup() %>% 
  filter(threshold_passing_with_complete_geography) %>% 
  select(-threshold_passing_with_complete_geography) %>% 
  mutate(geographic_level = fct_relevel(geographic_level, "State", "County", "City")) %>% 
  arrange(geographic_level) %>% 
  rename(grantee_type = geographic_level) %>% 
  rename_with(~to_sentence_case(.)) %>% 
  datatable(options = list(paging = FALSE, searching = FALSE)) %>% 
  formatPercentage("Percent included", digits = 1)

```

:::

### Number of grantees included, by state and type

::: panel-tabset

## County-Month Dataset

```{r, echo = FALSE, message = FALSE, warning = FALSE}

county_month_thresholds %>% 
  group_by(grantee_state, geographic_level, threshold_passing_with_complete_geography) %>%
  summarize(number_of_grantees_included = n ()) %>% 
  mutate(percent_included = number_of_grantees_included / sum(number_of_grantees_included)) %>% 
  ungroup() %>% 
  filter(threshold_passing_with_complete_geography) %>% 
  select(-threshold_passing_with_complete_geography) %>% 
  mutate(geographic_level = fct_relevel(geographic_level, "State", "County", "City")) %>% 
  arrange(grantee_state, geographic_level) %>% 
  rename(grantee_type = geographic_level) %>% 
  rename_with(~to_sentence_case(.)) %>% 
  datatable() %>% 
  formatPercentage("Percent included", digits = 1)

```

## County-Total Dataset

```{r, echo = FALSE, message = FALSE, warning = FALSE}

county_total_thresholds %>% 
  group_by(grantee_state, geographic_level, threshold_passing_with_complete_geography) %>%
  summarize(number_of_grantees_included = n ()) %>% 
  mutate(percent_included = number_of_grantees_included / sum(number_of_grantees_included)) %>% 
  ungroup() %>% 
  filter(threshold_passing_with_complete_geography) %>% 
  select(-threshold_passing_with_complete_geography) %>% 
  mutate(geographic_level = fct_relevel(geographic_level, "State", "County", "City")) %>% 
  arrange(grantee_state, geographic_level) %>% 
  rename(grantee_type = geographic_level) %>% 
  rename_with(~to_sentence_case(.)) %>% 
  datatable() %>% 
  formatPercentage("Percent included", digits = 1)

```

:::

### Grantees included with less than 90% variable quality

This table shows grantees included in the aggregations where less than 90% of their records (for either ERA1 or ERA2) met all of the following criteria:

- Record within the geographic jurisdiction of the grantee
- Record locatable to a specific county
- Positive payment amount recorded, below 99.9th percentile value of all records
- (For county-month dataset only) Date of payment recorded, neither too early nor too late for the program

Please see [the Methods page](methods.md#step-5-variable-checks) for more details on the thresholding process. 

::: panel-tabset

## County-Month Dataset

```{r, echo = F, message = F, warning = F}

county_month_thresholds %>% 
  filter(threshold_passing_with_complete_geography == TRUE) %>% 
  filter(ok_percent_era1 < 0.9 | ok_percent_era2 < 0.9) %>% 
  select(grantee_state, grantee_name, 
         ok_percent_era1, ok_percent_era2) %>% 
  arrange(ok_percent_era2, ok_percent_era1) %>% 
  rename_with(~to_any_case(., "title", abbreviations = c("OK", "ERA"))) %>% 
  datatable() %>% 
  formatPercentage(c("OK Percent ERA 1", "OK Percent ERA 2"), digits = 3)

```

## County-Total Dataset

```{r, echo = F, message = F, warning = F}

county_total_thresholds %>% 
  filter(threshold_passing_with_complete_geography == TRUE) %>% 
  filter(ok_percent_era1 < 0.9 | ok_percent_era2 < 0.9) %>% 
  select(grantee_state, grantee_name, 
         ok_percent_era1, ok_percent_era2) %>% 
  arrange(ok_percent_era2, ok_percent_era1) %>% 
  rename_with(~to_any_case(., "title", abbreviations = c("OK", "ERA"))) %>% 
  datatable() %>% 
  formatPercentage(c("OK Percent ERA 1", "OK Percent ERA 2"), digits = 3)

```

:::

### Grantees included with low spending amounts

This table shows grantees included in the aggregations where the grantee's summed positive payments in the ERA1 file was less than 80% of their final allocation for ERA1, or where their summed positive payments in the ERA2 file was less than 50% of their final allocation for ERA2.

These grantees may not have fully reported their assistance spending, especially for ERA2.

::: panel-tabset

## County-Month Dataset

```{r, echo = F, message = F, warning = F}

county_month_thresholds %>% 
  filter(threshold_passing_with_complete_geography == TRUE) %>% 
  filter(percent_of_allocation_spent_era1 < 0.8 | percent_of_allocation_spent_era2 < 0.5) %>% 
  select(grantee_state, grantee_name, 
         percent_of_allocation_spent_era1, percent_of_allocation_spent_era2) %>% 
  arrange(percent_of_allocation_spent_era2, percent_of_allocation_spent_era1) %>% 
  rename_with(~to_any_case(., "title", abbreviations = c("OK", "ERA"))) %>% 
  datatable() %>% 
  formatPercentage(c("Percent of Allocation Spent ERA 1", "Percent of Allocation Spent ERA 2"), 
                   digits = 3)

```

## County-Total Dataset

```{r, echo = F, message = F, warning = F}

county_total_thresholds %>% 
  filter(threshold_passing_with_complete_geography == TRUE) %>% 
  filter(percent_of_allocation_spent_era1 < 0.8 | percent_of_allocation_spent_era2 < 0.5) %>% 
  select(grantee_state, grantee_name, 
         percent_of_allocation_spent_era1, percent_of_allocation_spent_era2) %>% 
  arrange(percent_of_allocation_spent_era2, percent_of_allocation_spent_era1) %>% 
  rename_with(~to_any_case(., "title", abbreviations = c("OK", "ERA"))) %>% 
  datatable() %>% 
  formatPercentage(c("Percent of Allocation Spent ERA 1", "Percent of Allocation Spent ERA 2"), 
                   digits = 3)

```

:::


